     try:
            csv_file = request.FILES["csv_file"]
            if not csv_file.name.endswith('.csv'):
                messages.error(request,'File is not CSV type')
                return HttpResponseRedirect(reverse("myapp:upload_csv"))
            #if file is too large, return
            if csv_file.multiple_chunks():
                messages.error(request,"Uploaded file is too big (%.2f MB)." % (csv_file.size/(1000*1000),))
                return HttpResponseRedirect(reverse("myapp:upload_csv"))

            file_data = csv_file.read().decode("utf-8")		

            lines = file_data.split("\n")
            #loop over the lines and save them in db. If error , store as string and then display
            for line in lines:						
                fields = line.split(",")
                data_dict = {}
                data_dict["name"] = fields[0]
                data_dict["start_date_time"] = fields[1]
                data_dict["end_date_time"] = fields[2]
                data_dict["notes"] = fields[3]
                try:
                    form = EventsForm(data_dict)
                    if form.is_valid():
                        form.save()					
                    else:
                        logging.getLogger("error_logger").error(form.errors.as_json())												
                except Exception as e:
                    logging.getLogger("error_logger").error(repr(e))					
                    pass

        except Exception as e:
            logging.getLogger("error_logger").error("Unable to upload file. "+repr(e))
            messages.error(request,"Unable to upload file. "+repr(e))

        return HttpResponseRedirect(reverse("myapp:upload_csv"))


































        """ def UploadCsv(request):
	data = {}
	if "GET" == request.method:
		return render(request, "UploadCsv/UploadCsv.html", data)
    # if not GET, then proceed
	try:
		csv_file = request.FILES["csv_file"]
		if not csv_file.name.endswith('.csv'):
			messages.error(request,'File is not CSV type')
			return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html"))
        #if file is too large, return
		if csv_file.multiple_chunks():
			messages.error(request,"Uploaded file is too big (%.2f MB)." % (csv_file.size/(1000*1000),))
			return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html"))

		file_data = csv_file.read().decode("utf-8")		

		lines = file_data.split("\n")
		#loop over the lines and save them in db. If error , store as string and then display
		for line in lines:						
			fields = line.split(",")
			data_dict = {}
			data_dict["name"] = fields[0]
			data_dict["start_date_time"] = fields[1]
			data_dict["end_date_time"] = fields[2]
			data_dict["notes"] = fields[3]
			try:
				form = EventsForm(data_dict)
				if form.is_valid():
					form.save()					
				else:
					logging.getLogger("error_logger").error(form.errors.as_json())												
			except Exception as e:
				logging.getLogger("error_logger").error(repr(e))					
				pass

	except Exception as e:
		logging.getLogger("error_logger").error("Unable to upload file. "+repr(e))
		messages.error(request,"Unable to upload file. "+repr(e))

	return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html")) """


       #loop over the lines and save them in db. If error , store as string and then display
        """ for line in lines:						
            fields = line.split(",")
            data_dict = {}
            data_dict["id"] = fields[0]
            data_dict["numéro_employé"] = fields[1]
            data_dict["jours_travaillés"] = fields[2]
            data_dict["date_embauche"] = fields[3]
            data_dict["date_demission"] = fields[4]
            print(data_dict)
            #form = StudentForm(request.POST,request.FILES)
            form = StudentForm(data_dict)
            if form.is_valid():
                print(data_dict)
                handle_uploaded_file(request.FILES['csv_file'])
                BASE_DIR = Path(__file__).resolve().parent.parent
                print(BASE_DIR)
                print(data_dict)
                CsvTojson("name.csv","media")
                return HttpResponse("good")
            else:
                return HttpResponse("bad") """

                          """ data_dict["id"] = fields[0]
            data_dict["numéro_employé"] = fields[1]
            data_dict["jours_travaillés"] = fields[2]
            data_dict["date_embauche"] = fields[3]
            data_dict["date_demission"] = fields[4]
            data_dict["Cin"] = fields[5] """
  
            """ data_dict["id"] = fields[0]
            data_dict["numéro_employé"] = fields[1]
            data_dict["jours_travaillés"] = fields[2]
            data_dict["date_embauche"] = fields[3]
            data_dict["date_demission"] = fields[4]
            data_dict["Cin"] = fields[5]
            print(data_dict) """

                     """ print(data_dict) """
        """ for line in lines: """
        """ fields = line.split(",")
        print(len(fields)) """
        #print(fields)
        """ data_dict = {}
        data_dict["numéro_employé"] = fields[1]
        data_dict["jours_travaillés"] = fields[2]
        data_dict["date_embauche"] = fields[3]
        data_dict["date_demission"] = fields[4]
        data_dict["Cin"] = fields[6]
        emp_list_dict.append(data_dict) """from django.shortcuts import render,redirect

from django.contrib.auth import authenticate,login,logout
from django.contrib import messages
from App.models import CosutumUser
from django.http import HttpResponse  
from Accounts.functions import handle_uploaded_file  ,CsvTojson
from Accounts.form import StudentForm
from django.http import HttpResponse,JsonResponse
from django.urls import reverse
from pathlib import Path
from App.models import Employee
def login_user(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        #return user
        if user is not None:
            login(request, user)
            return redirect("Home")
        else:
            return redirect("login_user")
    else:
        return render(request,"Auth/login.html",{})
        
    
def Home(request):
    costumusers = CosutumUser.objects.filter(UserId_id = request.user.id)[0]
    return render(request,"Home/Home.html",{"costumusers":costumusers})

def UploadCsv(request):
    data = {}
    if "GET" == request.method:
        #all_emps = Employee.objects.all()
        #data = list(Employee.objects.values())
        #print(data)
        #return JsonResponse(data,safe=False)
        return render(request, "UploadCsv/UploadCsv.html", data)
    # if not GET, then proceed
    try:
        csv_file = request.FILES["csv_file"]
        if not csv_file.name.endswith('.csv'):
            #messages.error(request,'File is not CSV type')
            #return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html"))
            return HttpResponse("File is not CSV type")
        #if file is too large, return
        if csv_file.multiple_chunks():
            #messages.error(request,"Uploaded file is too big (%.2f MB)." % (csv_file.size/(1000*1000),))
            #return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html"))
            return HttpResponse("Uploaded file is too big (%.2f MB).")

        file_data = csv_file.read().decode("utf-8")		
        #print(file_data)
        #handle_uploaded_file(request.FILES['csv_file'])
        lines = file_data.split("\n")
        
        #data_emps = list(Employee.objects.values())
        #print(data_emps)
        #CsvTojson(r'name.csv',r'media.json')   
        emp_list_dict = []
        to = len(lines)-1
        for line in range(1,len(lines)-1):
            data_dict = {}
            fields = lines[line].split(",")
            print(len(fields))
            data_dict["id"] = fields[0]
            data_dict["numero_employe"] = fields[1]
            data_dict["jours_travaillés"] = fields[2]
            data_dict["date_embauche"] = fields[3]
            data_dict["date_demission"] = fields[4]
            data_dict["Cin"] = fields[6]
            emp_list_dict.append(data_dict)
            # i should check if each cin exists in the db

                
   
  
            #print(data_dict)
        #return HttpResponse(emp_list_dict)
        return JsonResponse(emp_list_dict,safe=False)
          
    except Exception as e:
        #logging.getLogger("error_logger").error("Unable to upload file. "+repr(e))
        #messages.error(request,"Unable to upload file. "+repr(e))
        return HttpResponse("Unable to upload file" + str(e))

    #return HttpResponseRedirect(reverse("UploadCsv/UploadCsv.html"))
    return HttpResponse("back to home") 
     """
            request.user
            File
        """

        #file_data = csv_file.read().decode("utf-8")		
            """ emp_json = model_to_dict(emp, fields=["numero_employe","jours_travaillés","date_embauche","date_demission"])
                json_2 = json.dumps(emp_json,  default=str)
                emp_list_json.append(json_2) """

                """ print(json_2)
                emp_list_json.append(json_2) """
                  #zack_dict = serializers.serialize("json",emp).
                   #zack_dict = json.dumps(dict_obj, sort_keys=True,indent=1, default=default)
                     """ print(zack_dict) """

                """ emp_list_json.append(data_dict) """
                """ print(data_dict) """
                """ qs_json = serializers.serialize('json', emp)
                print(emp.json()) """
                """ data_dict = serializers.serialize("json",emp) """
                """ data_dict = EmployeeSerializer(emp) """
                """ data_dict["numero_employe"] = emp.numero_employe
                data_dict["jours_travaillés"] = emp.jours_travailles
                data_dict["date_embauche"] = emp.date_embauche
                data_dict["date_demission"] = emp.date_demission
                data_dict["Cin"] = emp.Cin """
                """ emp_list_json.append(data_dict) """
                  #jsonString = json.dumps(emp_list_json)
        #print(jsonString)
        #print(emp_list_dict)

        #CallMicroservice(emp_list_json)
        #HttpResponse
        #emp_list_json_2 = json.dumps(emp_list_json,sort_keys=True,indent=1, default=default)
         #print(response_data)
           #return HttpResponse(emp_list_json_2)
        #return JsonResponse(emp_list_json_2,safe=False)
         #print(data_object_response["id"])